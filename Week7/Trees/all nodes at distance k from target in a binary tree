/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    void markingparent(TreeNode* root, TreeNode* target, unordered_map<TreeNode*,TreeNode*>& parent_marking){
        queue<TreeNode*> queue;
        queue.push(root);
        while(!queue.empty()){
            TreeNode* current=queue.front();
            queue.pop();
            if(current->left){
                parent_marking[current->left]=current;
                queue.push(current->left);
            }
            if(current->right){
                parent_marking[current->right]=current;
                queue.push(current->right);
            }
        }
    }
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*,TreeNode*> parent_marking;
        markingparent(root,target,parent_marking);
        unordered_map<TreeNode*,bool> visited;

        queue<TreeNode*> q;
        q.push(target);
        visited[target]=true;
        int curr_level=0;
        while(!q.empty()){
            if(curr_level++==k){
                break;
            }
            int size=q.size();

            for(int i=0;i<size;i++){
                TreeNode* current=q.front();
                q.pop();
                
                if(current->left && !visited[current->left]){
                    visited[current->left]=true;
                    q.push(current->left);
                }

                if(current->right && !visited[current->right]){
                    visited[current->right]=true;
                    q.push(current->right);
                }

                if(parent_marking[current] && !visited[parent_marking[current]]){
                    visited[parent_marking[current]]=true;
                    q.push(parent_marking[current]);
                }
            }

        }

        vector<int> ans;
        while(q.size()){
            ans.push_back(q.front()->val);
            q.pop();
        }
        return ans;
    }
};

link:https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/description/
