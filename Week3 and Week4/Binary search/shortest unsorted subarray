 int findUnsortedSubarray(vector<int>& nums) {
        vector<int>v=nums;
        sort(v.begin(), v.end());
        int st=0, en=v.size()-1;
        while(st<=v.size()-1 && v[st]==nums[st]){
            st++;
        }
        while(en>=0 && v[en]==nums[en]){
            en--;
        }
        //cout<<st<<" "<<en<<endl;
        if(en<0 || st>v.size()-1){return 0;}
        return en-st+1;
    }
    
    
    
    another code which workked for 122 testcases:

int left=-1,right=-1,lefti=0,righti=0;
        for(int i=0;i<nums.size()-1;i++){
            if(nums[i]>nums[i+1]){
                left=i;
                break;
            }
        }
        if(left!=-1){
            for(int i=left;i>0;i--){
                if(nums[i]==nums[i-1])lefti++;
                else break;
            }
            
        }
        for(int i=nums.size()-1;i>0;i--){
            if(nums[i]<nums[i-1]){
                right=i;
                break;
            }
        }
        if(right!=-1){
            for(int i=right;i<nums.size()-1;i++){
                if(nums[i]==nums[i+1])righti++;
                else break;
            }
        }

       
        if(left==-1 || right==-1)return 0;
        return right-left+lefti+righti+1;
        
      link:https://leetcode.com/problems/shortest-unsorted-continuous-subarray/description/
