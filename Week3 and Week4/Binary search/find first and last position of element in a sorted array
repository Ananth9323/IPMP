class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int> ans;
        ans.push_back(bsleft(nums,target,0,nums.size()-1));
        ans.push_back(bsright(nums,target,0,nums.size()-1));
        return ans;
    }

    int bsleft(vector<int>& nums, int target, int low, int high){
        if(low>high)return -1;
        int mid=(low+high)/2;
        if((mid==0 || nums[mid-1]<target) && nums[mid]==target)return mid;
        if(nums[mid]<target)return bsleft(nums,target,mid+1,high);
        return bsleft(nums,target,low,mid-1);
    }

    int bsright(vector<int>& nums, int target, int low, int high){
        if(low>high)return -1;
        int mid=(low+high)/2;
        if((mid==nums.size()-1 || nums[mid+1]>target) && nums[mid]==target)return mid;
        if(nums[mid]>target)return bsright(nums,target,low,mid-1);
        return bsright(nums,target,mid+1,high);
    }
        
    
};

link:https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/description/
