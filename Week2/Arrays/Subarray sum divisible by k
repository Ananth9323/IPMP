class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        if(nums.size()==0 || (nums.size()==1 && nums[0]%k!=0))return 0;
        if(nums.size()==1 && nums[0]%k==0)return 1;
        int sum=0,ans=0;
        unordered_map<int,int> m;
        m[0]++;
        for(int i=0;i<nums.size();i++){
            sum+=nums[i];
            int mod=(sum%k+k)%k; //it can be just sum%k but for negative numbers mod will be (sum%k+k)%k
            if(m.find(mod)!=m.end())ans+=m[mod];
            m[mod]++;
        }
        return ans;
    }

    /*
        int sum=0,ans=0;
        for(int i=0;i<nums.size();i++){
            sum=0;
            for(int j=i;j<nums.size();j++){
                sum+=nums[j];
                if(sum%k==0)ans++;
            }
            
        }
        return ans;
        
    */
};

link:https://leetcode.com/problems/subarray-sums-divisible-by-k/description/
