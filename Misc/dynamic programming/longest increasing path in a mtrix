class Solution {
public:
    int dp[201][201];
    int longestIncreasingPath(vector<vector<int>>& matrix) {
        memset(dp,-1,sizeof dp);
        int ans=INT_MIN;
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int>> visited(m, vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                ans=max(ans,helper(matrix,i,j,visited,matrix[i][j]));
            }
        }
        return ans+1;
    }

    int helper(vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& visited, int prev){
        if(dp[row][col]!=-1)return dp[row][col];
        visited[row][col]=1;
        vector<int> delrow={-1,0,1,0};
        vector<int> delcol={0,1,0,-1};
        int m=matrix.size(), n=matrix[0].size();
        int ans=0;
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && !visited[nrow][ncol] && matrix[nrow][ncol]>matrix[row][col]){
                ans=max(ans,1+helper(matrix,nrow,ncol,visited,matrix[row][col]));;
            }
        }
        visited[row][col]=0;
        return dp[row][col]=ans;
    }
};




//passed 135/138 test cases, my own solution
/*
int longestIncreasingPath(vector<vector<int>>& matrix) {
        int ans=INT_MIN;
        int m=matrix.size();
        int n=matrix[0].size();
        vector<vector<int>> visited(m, vector<int>(n,0));
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                ans=max(ans,helper(matrix,i,j,visited,matrix[i][j]));
            }
        }
        return ans+1;
    }

    int helper(vector<vector<int>>& matrix, int row, int col, vector<vector<int>>& visited, int prev){
        visited[row][col]=1;
        vector<int> delrow={-1,0,1,0};
        vector<int> delcol={0,1,0,-1};
        int m=matrix.size(), n=matrix[0].size();
        int ans=0;
        for(int i=0;i<4;i++){
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && ncol>=0 && nrow<m && ncol<n && !visited[nrow][ncol] && matrix[nrow][ncol]>matrix[row][col]){
                ans=max(ans,1+helper(matrix,nrow,ncol,visited,matrix[row][col]));;
            }
        }
        visited[row][col]=0;
        return ans;
    }*/
