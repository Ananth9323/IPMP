/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode *ans;
    TreeNode* subtreeWithAllDeepest(TreeNode* root) {
        unordered_map<TreeNode*,int> mp;
        f(root,mp);
        f1(root,mp);
        return ans;
    }

    int f(TreeNode* root, unordered_map<TreeNode*, int>& mp){
        if(!root)return 0;
        int l=f(root->left,mp);
        int r=f(root->right,mp);
        mp[root]=1+max(l,r);
        return mp[root];
    }

    void f1(TreeNode *root, unordered_map<TreeNode*,int>& mp){

        int left=mp[root->left];
        int right=mp[root->right];
        if(left>right){
            f1(root->left,mp);
        }
        else if(right>left){
            f1(root->right,mp);
        }
        else ans=root;
    }
};
