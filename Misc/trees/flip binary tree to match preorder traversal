/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int i;
    vector<int> flip;
    vector<int> flipMatchVoyage(TreeNode* root, vector<int>& voyage) {
        i=0;
        return helper(root,voyage)?flip:vector<int>{-1};
    }

    bool helper(TreeNode *root, vector<int>& v){
        if(!root)return true;
        if(root->val!=v[i++])return false;
        if(root->left && root->left->val!=v[i]){
            if(root->right && root->right->val==v[i]){
                flip.push_back(root->val);
                swap(root->left, root->right);
            }
            else return false;

        }

        return helper(root->left,v) && helper(root->right,v);
    }
};
