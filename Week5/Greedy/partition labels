class Solution {
public:
    
    vector<int> partitionLabels(string s) {
        unordered_map<char,int> mp;
        for(int i=0;i<s.size();i++){
            if(mp.find(s[i])==mp.end()){
                mp[s[i]]=i;
            }
            else{
                mp[s[i]]=i;
            }
        }
        int maxi=0,prev=-1;
        vector<int> ans;
        for(int i=0;i<s.size();i++){
            maxi=max(maxi,mp[s[i]]);
            if(maxi==i){
                ans.push_back(maxi-prev);
                prev=maxi;
            }
        }
        return ans;

    }


    //my solution
    /*
     static bool cmp(vector<int>& v1, vector<int>& v2){
        return v1[1]<v2[1];
    }
    vector<int> partitionLabels(string s) {
        unordered_map<char,pair<int,int>> mp;
        for(int i=0;i<s.size();i++){
            if(mp.find(s[i])==mp.end()){
                mp.insert(make_pair(s[i],make_pair(i,i)));
            }
            else{
                mp[s[i]].second=i;
            }
        }
        vector<vector<int>> v;
        for(auto i:mp){
            v.push_back({i.second.first,i.second.second});
        }
        vector<int> ans;
        sort(v.begin(),v.end(),cmp);
        int localmin=v[0][0], localmax=v[0][1];
        for(int i=1;i<v.size();i++){
            if(v[i][0]>v[i-1][1]){
                int temp=localmax-localmin;
                ans.push_back(temp);
                localmin=v[i][0];
                localmax=v[i][1];
            }
            else{
                if(v[i][0]<localmin){
                    localmin=v[i][0];
                }
                if(v[i][1]>localmax){
                    localmax=v[i][1];
                }
            }
        }
        return ans;
    */
};

link:https://leetcode.com/problems/partition-labels/
